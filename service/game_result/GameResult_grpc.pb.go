// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package game_result

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameResultClient is the client API for GameResult service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameResultClient interface {
	GameResult(ctx context.Context, in *ResultMsg_Request, opts ...grpc.CallOption) (*ResultMsg_Response, error)
}

type gameResultClient struct {
	cc grpc.ClientConnInterface
}

func NewGameResultClient(cc grpc.ClientConnInterface) GameResultClient {
	return &gameResultClient{cc}
}

func (c *gameResultClient) GameResult(ctx context.Context, in *ResultMsg_Request, opts ...grpc.CallOption) (*ResultMsg_Response, error) {
	out := new(ResultMsg_Response)
	err := c.cc.Invoke(ctx, "/CompetitionPlatform.proto.api.GameResult/GameResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameResultServer is the server API for GameResult service.
// All implementations must embed UnimplementedGameResultServer
// for forward compatibility
type GameResultServer interface {
	GameResult(context.Context, *ResultMsg_Request) (*ResultMsg_Response, error)
	mustEmbedUnimplementedGameResultServer()
}

// UnimplementedGameResultServer must be embedded to have forward compatible implementations.
type UnimplementedGameResultServer struct {
}

func (UnimplementedGameResultServer) GameResult(context.Context, *ResultMsg_Request) (*ResultMsg_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GameResult not implemented")
}
func (UnimplementedGameResultServer) mustEmbedUnimplementedGameResultServer() {}

// UnsafeGameResultServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameResultServer will
// result in compilation errors.
type UnsafeGameResultServer interface {
	mustEmbedUnimplementedGameResultServer()
}

func RegisterGameResultServer(s grpc.ServiceRegistrar, srv GameResultServer) {
	s.RegisterService(&GameResult_ServiceDesc, srv)
}

func _GameResult_GameResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultMsg_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameResultServer).GameResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompetitionPlatform.proto.api.GameResult/GameResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameResultServer).GameResult(ctx, req.(*ResultMsg_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GameResult_ServiceDesc is the grpc.ServiceDesc for GameResult service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameResult_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompetitionPlatform.proto.api.GameResult",
	HandlerType: (*GameResultServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GameResult",
			Handler:    _GameResult_GameResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/GameResult.proto",
}
