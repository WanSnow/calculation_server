// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package start_game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StartGameClient is the client API for StartGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StartGameClient interface {
	StartGame(ctx context.Context, in *GameMsg_Request, opts ...grpc.CallOption) (StartGame_StartGameClient, error)
}

type startGameClient struct {
	cc grpc.ClientConnInterface
}

func NewStartGameClient(cc grpc.ClientConnInterface) StartGameClient {
	return &startGameClient{cc}
}

func (c *startGameClient) StartGame(ctx context.Context, in *GameMsg_Request, opts ...grpc.CallOption) (StartGame_StartGameClient, error) {
	stream, err := c.cc.NewStream(ctx, &StartGame_ServiceDesc.Streams[0], "/CompetitionPlatform.proto.api.StartGame/StartGame", opts...)
	if err != nil {
		return nil, err
	}
	x := &startGameStartGameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StartGame_StartGameClient interface {
	Recv() (*GameMsg_Response, error)
	grpc.ClientStream
}

type startGameStartGameClient struct {
	grpc.ClientStream
}

func (x *startGameStartGameClient) Recv() (*GameMsg_Response, error) {
	m := new(GameMsg_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StartGameServer is the server API for StartGame service.
// All implementations must embed UnimplementedStartGameServer
// for forward compatibility
type StartGameServer interface {
	StartGame(*GameMsg_Request, StartGame_StartGameServer) error
	mustEmbedUnimplementedStartGameServer()
}

// UnimplementedStartGameServer must be embedded to have forward compatible implementations.
type UnimplementedStartGameServer struct {
}

func (UnimplementedStartGameServer) StartGame(*GameMsg_Request, StartGame_StartGameServer) error {
	return status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedStartGameServer) mustEmbedUnimplementedStartGameServer() {}

// UnsafeStartGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StartGameServer will
// result in compilation errors.
type UnsafeStartGameServer interface {
	mustEmbedUnimplementedStartGameServer()
}

func RegisterStartGameServer(s grpc.ServiceRegistrar, srv StartGameServer) {
	s.RegisterService(&StartGame_ServiceDesc, srv)
}

func _StartGame_StartGame_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GameMsg_Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StartGameServer).StartGame(m, &startGameStartGameServer{stream})
}

type StartGame_StartGameServer interface {
	Send(*GameMsg_Response) error
	grpc.ServerStream
}

type startGameStartGameServer struct {
	grpc.ServerStream
}

func (x *startGameStartGameServer) Send(m *GameMsg_Response) error {
	return x.ServerStream.SendMsg(m)
}

// StartGame_ServiceDesc is the grpc.ServiceDesc for StartGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StartGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompetitionPlatform.proto.api.StartGame",
	HandlerType: (*StartGameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartGame",
			Handler:       _StartGame_StartGame_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api/StartGame.proto",
}
