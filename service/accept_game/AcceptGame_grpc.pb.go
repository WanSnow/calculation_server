// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accept_game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AcceptGameClient is the client API for AcceptGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcceptGameClient interface {
	AcceptGame(ctx context.Context, in *GameMsg_Request, opts ...grpc.CallOption) (*GameMsg_Response, error)
}

type acceptGameClient struct {
	cc grpc.ClientConnInterface
}

func NewAcceptGameClient(cc grpc.ClientConnInterface) AcceptGameClient {
	return &acceptGameClient{cc}
}

func (c *acceptGameClient) AcceptGame(ctx context.Context, in *GameMsg_Request, opts ...grpc.CallOption) (*GameMsg_Response, error) {
	out := new(GameMsg_Response)
	err := c.cc.Invoke(ctx, "/CompetitionPlatform.proto.api.AcceptGame/AcceptGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcceptGameServer is the server API for AcceptGame service.
// All implementations must embed UnimplementedAcceptGameServer
// for forward compatibility
type AcceptGameServer interface {
	AcceptGame(context.Context, *GameMsg_Request) (*GameMsg_Response, error)
	mustEmbedUnimplementedAcceptGameServer()
}

// UnimplementedAcceptGameServer must be embedded to have forward compatible implementations.
type UnimplementedAcceptGameServer struct {
}

func (UnimplementedAcceptGameServer) AcceptGame(context.Context, *GameMsg_Request) (*GameMsg_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptGame not implemented")
}
func (UnimplementedAcceptGameServer) mustEmbedUnimplementedAcceptGameServer() {}

// UnsafeAcceptGameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcceptGameServer will
// result in compilation errors.
type UnsafeAcceptGameServer interface {
	mustEmbedUnimplementedAcceptGameServer()
}

func RegisterAcceptGameServer(s grpc.ServiceRegistrar, srv AcceptGameServer) {
	s.RegisterService(&AcceptGame_ServiceDesc, srv)
}

func _AcceptGame_AcceptGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMsg_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcceptGameServer).AcceptGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CompetitionPlatform.proto.api.AcceptGame/AcceptGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcceptGameServer).AcceptGame(ctx, req.(*GameMsg_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AcceptGame_ServiceDesc is the grpc.ServiceDesc for AcceptGame service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AcceptGame_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CompetitionPlatform.proto.api.AcceptGame",
	HandlerType: (*AcceptGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptGame",
			Handler:    _AcceptGame_AcceptGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/AcceptGame.proto",
}
